{
  "source": "doc/api/childprocess.markdown",
  "modules": [
    {
      "textRaw": "Child Process",
      "name": "child_process",
      "desc": "<p>It is possible to stream data through a child&#39;s stdin, stdout, and stderr in a fully non-blocking way.\n\n</p>\n",
      "methods": [
        {
          "textRaw": "childprocess.spawn(command, args, options)",
          "type": "method",
          "name": "spawn",
          "desc": "<p>Spawns a command line process.\n\n</p>\n<p>Since the data coming in is a stream, you may want to pass it through a filter like the luvit line emitter package\nto get lines instead. \n\n</p>\n<pre><code>function example()\n  local LineEmitter = require(&#39;line-emitter&#39;).LineEmitter\n  local childProcess = require(&#39;childprocess&#39;)\n  local function run(command, args, options)\n    local stdout, stderr = LineEmitter:new(), LineEmitter:new()\n    local child = childProcess.spawn(command, args, options)\n    child.stdout:pipe(stdout)\n    child.stderr:pipe(stderr)\n    return child, stdout, stderr\n  end\n\n  local child = run(&#39;ls&#39;, {&#39;-hal&#39;}, {})\n  child:on(&#39;data&#39;, print)\nend\n\nexample()\n\ntotal 2\ndrwxr-xr-x   31 root  wheel   1.1K Aug 21 16:39 .\ndrwxr-xr-x   31 root  wheel   1.1K Aug 21 16:39 ..</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "command"
                },
                {
                  "name": "args"
                },
                {
                  "name": "options"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Child Process"
    }
  ]
}
