{
  "source": "doc/api/core.markdown",
  "modules": [
    {
      "textRaw": "Core",
      "name": "core",
      "desc": "<p>Core object model for luvit using simple prototypes and inheritance. We support single inheritance for classes.\n\n</p>\n",
      "methods": [
        {
          "textRaw": "core.instanceof(obj, class)",
          "type": "method",
          "name": "instanceof",
          "desc": "<p>Given an object which inherits from a class, and a class, returns whether the object is an instance of that class.\n\n</p>\n<pre><code>&gt; em = core.Emitter:new()\n&gt; core.instanceof(em, core.Emitter)\ntrue</code></pre>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "obj"
                },
                {
                  "name": "class"
                }
              ]
            }
          ]
        }
      ],
      "classes": [
        {
          "textRaw": "Class: core.Object",
          "type": "class",
          "name": "core.Object",
          "desc": "<p>The base object class. It provides simple prototypal inheritance and inheritable constructors. \nAll other objects inherit from this.\n\n</p>\n",
          "methods": [
            {
              "textRaw": "Object:create()",
              "type": "method",
              "name": "Object:create",
              "desc": "<p>Creates a new instance of the base object\n\n</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "Object:new(...)",
              "type": "method",
              "name": "Object:new",
              "desc": "<p>Creates a new instance and calls <code>obj:initialize(...)</code> if it exists.\n</p>\n<pre><code>local Rectangle = Object:extend()\nfunction Rectangle:initialize(w, h)\n  self.w = w\n  self.h = h\nend\nfunction Rectangle:getArea()\n  return self.w * self.h\nend\nlocal rect = Rectangle:new(3, 4)\np(rect:getArea())</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "..."
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Object:extend()",
              "type": "method",
              "name": "Object:extend",
              "desc": "<p>Creates a new sub-class.\n\n</p>\n<pre><code>local Square = Rectangle:extend()\nfunction Square:initialize(w)\n  self.w = w\n  self.h = h\nend</code></pre>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "core.Emitter",
          "name": "Emitter",
          "desc": "<p>This class can be used directly whenever an event emitter is needed.\n</p>\n<pre><code>local emitter = Emitter:new()\nemitter:on(&#39;foo&#39;, p)\nemitter:emit(&#39;foo&#39;, 1, 2, 3)</code></pre>\n<p>Also it can easily be sub-classed.\n</p>\n<pre><code>local Custom = Emitter:extend()\nlocal c = Custom:new()\nc:on(&#39;bar&#39;, onBar)</code></pre>\n<p>Unlike EventEmitter in node.js, Emitter class doesn&#39;t auto binds <code>self</code>\nreference. This means, if a callback handler is expecting a <code>self</code> reference,\nutils.bind() should be used, and the callback handler should have a <code>self</code> at\nthe beginning its parameter list.\n</p>\n<pre><code>function some_func(self, a, b, c) end\nemitter:on(&#39;end&#39;, utils.bind(some_func, emitter))\nemitter:emit(&#39;end&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</code></pre>\n",
          "methods": [
            {
              "textRaw": "Emitter:on(name. callback)",
              "type": "method",
              "name": "Emitter:on",
              "desc": "<p>Adds an event listener (<code>callback</code>) for the named event <code>name</code>.\n\n</p>\n<pre><code>em = Emitter:new()\nem:on(&#39;data&#39;, function(data) print(data) end)</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name. callback"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Emitter:once(name, callback)",
              "type": "method",
              "name": "Emitter:once",
              "desc": "<p>Same as <code>Emitter:on</code> except it de-registers itself after the first event.\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Emitter:listenerCount(name)",
              "type": "method",
              "name": "Emitter:listenerCount",
              "desc": "<p>Returns the count of the listeners bound to an event with the name <code>name</code>\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Emitter:emit(name, ...)",
              "type": "method",
              "name": "Emitter:emit",
              "desc": "<p>Emit a named event to all listeners with optional data arguments\n\n</p>\n<pre><code>&gt; em = Emitter:new()\n&gt; em:on(&#39;data&#39;, function(data) print(data) end)\n&gt; em:emit(&#39;data&#39;, &#39;foo&#39;)\n&#39;foo&#39;</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "..."
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Emitter:removeListener(name, callback)",
              "type": "method",
              "name": "Emitter:removeListener",
              "desc": "<p>Removes a listener so it no longer catches events\n\n</p>\n<pre><code>&gt; em = Emitter:new()\n&gt; em:on(&#39;data&#39;, function(data) print(data) end)\n&gt; em:emit(&#39;data&#39;, &#39;foo&#39;)\nfoo\n&gt; em:removeListener(&#39;data&#39;, function() em:emit(&#39;data&#39;, &#39;foo&#39;) end)\n&gt; -- nothing printed</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Emitter:removeAllListeners(name)",
              "type": "method",
              "name": "Emitter:removeAllListeners",
              "desc": "<p>Removes all listeners. Name is optional and if supplied will make it act like removeListener\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Emitter:listeners(name)",
              "type": "method",
              "name": "Emitter:listeners",
              "desc": "<p>Returns listeners for the event with name <code>name</code>\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Emitter:wrap(name)",
              "type": "method",
              "name": "Emitter:wrap",
              "desc": "<p>Utility that binds the named method <code>self[name]</code> for use as a callback.  The\nfirst argument (<code>err</code>) is re-routed to the &quot;error&quot; event instead.\n\n\n</p>\n<pre><code>local Joystick = Emitter:extend()\nfunction Joystick:initialize(device)\n  self:wrap(&quot;onOpen&quot;)\n  FS.open(device, self.onOpen)\nend\nfunction Joystick:onOpen(fd)\n  -- and so forth\nend</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "name"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Emitter:propagate(eventName, target)",
              "type": "method",
              "name": "Emitter:propagate",
              "desc": "<p>Propagate the event to another emitter.\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "eventName"
                    },
                    {
                      "name": "target"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "textRaw": "core.Error",
          "name": "Error",
          "desc": "<p>This is for code that wants structured error messages.\n\n</p>\n",
          "methods": [
            {
              "textRaw": "Error:initialize(message)",
              "type": "method",
              "name": "Error:initialize",
              "desc": "<p>How to handle strings\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "message"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Core"
    }
  ]
}
