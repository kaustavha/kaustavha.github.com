{
  "source": "doc/api/net.markdown",
  "modules": [
    {
      "textRaw": "Net",
      "name": "net",
      "desc": "<p>Node-style net client and server module for luvit  \n\n</p>\n<p><code>local net = require(&#39;net&#39;)</code>\n\n</p>\n",
      "classes": [
        {
          "textRaw": "Class: Socket",
          "type": "class",
          "name": "Socket",
          "methods": [
            {
              "textRaw": "Socket:initialize(options)",
              "type": "method",
              "name": "Socket:initialize",
              "desc": "<p>The Socket initializer called when an instance is generated with Socket:new()\nYou can pass in a number to options and the module will try to guess if a handler of type TCP or PIPE is required, or specify a handler\nlike so: <code>Socket:new({handle = &#39;Valid handle type&#39;})</code>\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "options"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Socket:resume()",
              "type": "method",
              "name": "Socket:resume",
              "desc": "<p>Works as either  \n</p>\n<pre><code>local options = {\n  host = ...,\n  port = ...\n}\nconnect(options, [cb])</code></pre>\n<p>or  \n</p>\n<pre><code>connect(port, [host, cb])</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "..."
                    }
                  ]
                },
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "Socket:connect(...)",
              "type": "method",
              "name": "Socket:connect",
              "desc": "<p>Works as either  \n</p>\n<pre><code>local options = {\n  host = ...,\n  port = ...\n}\nconnect(options, [cb])</code></pre>\n<p>or  \n</p>\n<pre><code>connect(port, [host, cb])</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "..."
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Socket:destroy(exception[, callback])",
              "type": "method",
              "name": "Socket:destroy",
              "desc": "<p>Default queueSize is 128\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "queueSize",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "exception"
                    },
                    {
                      "name": "callback",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Socket:listen([queueSize])",
              "type": "method",
              "name": "Socket:listen",
              "desc": "<p>Default queueSize is 128\n\n</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "queueSize",
                      "optional": true
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Socket:getsockname()",
              "type": "method",
              "name": "Socket:getsockname",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        },
        {
          "textRaw": "Class: Server",
          "type": "class",
          "name": "Server",
          "methods": [
            {
              "textRaw": "Server:listen(port[, ip], callback)",
              "type": "method",
              "name": "Server:listen",
              "signatures": [
                {
                  "params": []
                },
                {
                  "params": [
                    {
                      "name": "port"
                    },
                    {
                      "name": "ip",
                      "optional": true
                    },
                    {
                      "name": "callback"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "Server:address()",
              "type": "method",
              "name": "Server:address",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "methods": [
        {
          "textRaw": "net.createConnection(...)",
          "type": "method",
          "name": "createConnection",
          "desc": "<p><code>createConnection(port, host, callback)</code><br>or\n<code>createConnection({port = ..., host = ..., callback = ...})</code>\n\n</p>\n<p>Creates, configures, connects and returns a new Socket instance.\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "..."
                }
              ]
            }
          ]
        },
        {
          "textRaw": "net.connect(...)",
          "type": "method",
          "name": "connect",
          "desc": "<p>Alias for net.createConnection(...)\n\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "..."
                }
              ]
            }
          ]
        },
        {
          "textRaw": "net.createServer(options, connectionListener)",
          "type": "method",
          "name": "createServer",
          "desc": "<p>Creates, configures, initializes and returns a new Server instance.\n</p>\n",
          "signatures": [
            {
              "params": [
                {
                  "name": "options"
                },
                {
                  "name": "connectionListener"
                }
              ]
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "Net"
    }
  ]
}
