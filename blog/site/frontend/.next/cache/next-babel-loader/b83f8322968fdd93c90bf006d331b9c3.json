{"ast":null,"code":"async function fetchAPI(query, {\n  variables\n} = {}) {\n  const res = await fetch(`${process.env.API_URL}/graphql`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getArticles() {\n  const data = await fetchAPI(`query Articles {\n    articles {\n      id\n      title\n      category {\n        id\n        name\n      }\n      image {\n        url\n        alternativeText\n      }\n    }\n  }`);\n  return data.articles;\n}\nexport async function getArticle(id) {\n  const data = await fetchAPI(`query Articles($id: ID!) {\n    article(id: $id) {\n      id\n      title\n      content\n      image {\n        url\n        alternativeText\n      }\n      category {\n        id\n        name\n      }\n      published_at\n    }\n  }`, {\n    variables: {\n      id\n    }\n  });\n  return data.article;\n}\nexport async function getCategories() {\n  const data = await fetchAPI(`query Categories {\n    categories {\n      id\n      name\n    }\n  }`);\n  return data.categories;\n}\nexport async function getCategory(id) {\n  const data = await fetchAPI(`query Category($id: ID!) {\n    category(id: $id) {\n      id\n      name\n      articles {\n        id\n        title\n        content\n        image {\n          url\n          alternativeText\n        }\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n`, {\n    variables: {\n      id\n    }\n  });\n  return data.category;\n}","map":{"version":3,"sources":["/Users/maximecastres/Projects/starters/strapi-starter-next-blog/frontend/lib/api.js"],"names":["fetchAPI","query","variables","res","fetch","process","env","API_URL","method","headers","body","JSON","stringify","json","errors","console","error","Error","data","getArticles","articles","getArticle","id","article","getCategories","categories","getCategory","category"],"mappings":"AAAA,eAAeA,QAAf,CAAwBC,KAAxB,EAA+B;AAAEC,EAAAA;AAAF,IAAgB,EAA/C,EAAmD;AACjD,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,OAAQ,UAAxB,EAAmC;AACxDC,IAAAA,MAAM,EAAE,MADgD;AAExDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAF+C;AAKxDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,MAAAA,KADmB;AAEnBC,MAAAA;AAFmB,KAAf;AALkD,GAAnC,CAAvB;AAWA,QAAMW,IAAI,GAAG,MAAMV,GAAG,CAACU,IAAJ,EAAnB;;AACA,MAAIA,IAAI,CAACC,MAAT,EAAiB;AACfC,IAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AACA,UAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,SAAOJ,IAAI,CAACK,IAAZ;AACD;;AAED,OAAO,eAAeC,WAAf,GAA6B;AAClC,QAAMD,IAAI,GAAG,MAAMlB,QAAQ,CAAE;;;;;;;;;;;;;IAAF,CAA3B;AAcA,SAAOkB,IAAI,CAACE,QAAZ;AACD;AAED,OAAO,eAAeC,UAAf,CAA0BC,EAA1B,EAA8B;AACnC,QAAMJ,IAAI,GAAG,MAAMlB,QAAQ,CACxB;;;;;;;;;;;;;;;IADwB,EAiBzB;AAAEE,IAAAA,SAAS,EAAE;AAAEoB,MAAAA;AAAF;AAAb,GAjByB,CAA3B;AAmBA,SAAOJ,IAAI,CAACK,OAAZ;AACD;AAED,OAAO,eAAeC,aAAf,GAA+B;AACpC,QAAMN,IAAI,GAAG,MAAMlB,QAAQ,CAAE;;;;;IAAF,CAA3B;AAMA,SAAOkB,IAAI,CAACO,UAAZ;AACD;AAED,OAAO,eAAeC,WAAf,CAA2BJ,EAA3B,EAA+B;AACpC,QAAMJ,IAAI,GAAG,MAAMlB,QAAQ,CACxB;;;;;;;;;;;;;;;;;;;CADwB,EAqBzB;AAAEE,IAAAA,SAAS,EAAE;AAAEoB,MAAAA;AAAF;AAAb,GArByB,CAA3B;AAuBA,SAAOJ,IAAI,CAACS,QAAZ;AACD","sourcesContent":["async function fetchAPI(query, { variables } = {}) {\n  const res = await fetch(`${process.env.API_URL}/graphql`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n\n  const json = await res.json()\n  if (json.errors) {\n    console.error(json.errors)\n    throw new Error('Failed to fetch API')\n  }\n\n  return json.data\n}\n\nexport async function getArticles() {\n  const data = await fetchAPI(`query Articles {\n    articles {\n      id\n      title\n      category {\n        id\n        name\n      }\n      image {\n        url\n        alternativeText\n      }\n    }\n  }`)\n  return data.articles\n}\n\nexport async function getArticle(id) {\n  const data = await fetchAPI(\n    `query Articles($id: ID!) {\n    article(id: $id) {\n      id\n      title\n      content\n      image {\n        url\n        alternativeText\n      }\n      category {\n        id\n        name\n      }\n      published_at\n    }\n  }`,\n    { variables: { id } }\n  )\n  return data.article\n}\n\nexport async function getCategories() {\n  const data = await fetchAPI(`query Categories {\n    categories {\n      id\n      name\n    }\n  }`)\n  return data.categories\n}\n\nexport async function getCategory(id) {\n  const data = await fetchAPI(\n    `query Category($id: ID!) {\n    category(id: $id) {\n      id\n      name\n      articles {\n        id\n        title\n        content\n        image {\n          url\n          alternativeText\n        }\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n`,\n    { variables: { id } }\n  )\n  return data.category\n}\n"]},"metadata":{},"sourceType":"module"}